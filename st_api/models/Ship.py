# generated by datamodel-codegen:
#   filename:  api-docs/models/Ship.json
#   timestamp: 2023-10-15T19:00:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ShipRole(Enum):
    FABRICATOR = "FABRICATOR"
    HARVESTER = "HARVESTER"
    HAULER = "HAULER"
    INTERCEPTOR = "INTERCEPTOR"
    EXCAVATOR = "EXCAVATOR"
    TRANSPORT = "TRANSPORT"
    REPAIR = "REPAIR"
    SURVEYOR = "SURVEYOR"
    COMMAND = "COMMAND"
    CARRIER = "CARRIER"
    PATROL = "PATROL"
    SATELLITE = "SATELLITE"
    EXPLORER = "EXPLORER"
    REFINERY = "REFINERY"


class WaypointType(Enum):
    PLANET = "PLANET"
    GAS_GIANT = "GAS_GIANT"
    MOON = "MOON"
    ORBITAL_STATION = "ORBITAL_STATION"
    JUMP_GATE = "JUMP_GATE"
    ASTEROID_FIELD = "ASTEROID_FIELD"
    NEBULA = "NEBULA"
    DEBRIS_FIELD = "DEBRIS_FIELD"
    GRAVITY_WELL = "GRAVITY_WELL"


class ShipNavStatus(Enum):
    IN_TRANSIT = "IN_TRANSIT"
    IN_ORBIT = "IN_ORBIT"
    DOCKED = "DOCKED"


class ShipNavFlightMode(Enum):
    DRIFT = "DRIFT"
    STEALTH = "STEALTH"
    CRUISE = "CRUISE"
    BURN = "BURN"


class Rotation(Enum):
    STRICT = "STRICT"
    RELAXED = "RELAXED"


class ShipCrew(BaseModel):
    current: int = Field(
        ..., description="The current number of crew members on the ship."
    )
    required: int = Field(
        ...,
        description="The minimum number of crew members required to maintain the ship.",
    )
    capacity: int = Field(
        ..., description="The maximum number of crew members the ship can support."
    )
    rotation: Rotation = Field(
        ...,
        description="The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.",
    )
    morale: conint(ge=0, le=100) = Field(
        ...,
        description="A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.",
    )
    wages: conint(ge=0) = Field(
        ...,
        description="The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.",
    )


class Symbol(Enum):
    FRAME_PROBE = "FRAME_PROBE"
    FRAME_DRONE = "FRAME_DRONE"
    FRAME_INTERCEPTOR = "FRAME_INTERCEPTOR"
    FRAME_RACER = "FRAME_RACER"
    FRAME_FIGHTER = "FRAME_FIGHTER"
    FRAME_FRIGATE = "FRAME_FRIGATE"
    FRAME_SHUTTLE = "FRAME_SHUTTLE"
    FRAME_EXPLORER = "FRAME_EXPLORER"
    FRAME_MINER = "FRAME_MINER"
    FRAME_LIGHT_FREIGHTER = "FRAME_LIGHT_FREIGHTER"
    FRAME_HEAVY_FREIGHTER = "FRAME_HEAVY_FREIGHTER"
    FRAME_TRANSPORT = "FRAME_TRANSPORT"
    FRAME_DESTROYER = "FRAME_DESTROYER"
    FRAME_CRUISER = "FRAME_CRUISER"
    FRAME_CARRIER = "FRAME_CARRIER"


class ShipCondition(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100) = Field(
        ...,
        description="Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.",
    )


class ShipRequirements(BaseModel):
    power: Optional[int] = Field(
        None, description="The amount of power required from the reactor."
    )
    crew: Optional[int] = Field(
        None, description="The number of crew required for operation."
    )
    slots: Optional[int] = Field(
        None, description="The number of module slots required for installation."
    )


class Symbol1(Enum):
    REACTOR_SOLAR_I = "REACTOR_SOLAR_I"
    REACTOR_FUSION_I = "REACTOR_FUSION_I"
    REACTOR_FISSION_I = "REACTOR_FISSION_I"
    REACTOR_CHEMICAL_I = "REACTOR_CHEMICAL_I"
    REACTOR_ANTIMATTER_I = "REACTOR_ANTIMATTER_I"


class ShipReactor(BaseModel):
    symbol: Symbol1 = Field(..., description="Symbol of the reactor.")
    name: str = Field(..., description="Name of the reactor.")
    description: str = Field(..., description="Description of the reactor.")
    condition: Optional[ShipCondition] = None
    powerOutput: conint(ge=1) = Field(
        ...,
        description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.",
    )
    requirements: ShipRequirements


class Symbol2(Enum):
    ENGINE_IMPULSE_DRIVE_I = "ENGINE_IMPULSE_DRIVE_I"
    ENGINE_ION_DRIVE_I = "ENGINE_ION_DRIVE_I"
    ENGINE_ION_DRIVE_II = "ENGINE_ION_DRIVE_II"
    ENGINE_HYPER_DRIVE_I = "ENGINE_HYPER_DRIVE_I"


class ShipEngine(BaseModel):
    symbol: Symbol2 = Field(..., description="The symbol of the engine.")
    name: str = Field(..., description="The name of the engine.")
    description: str = Field(..., description="The description of the engine.")
    condition: Optional[ShipCondition] = None
    speed: conint(ge=1) = Field(
        ...,
        description="The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.",
    )
    requirements: ShipRequirements


class Cooldown(BaseModel):
    shipSymbol: constr(min_length=1) = Field(
        ..., description="The symbol of the ship that is on cooldown"
    )
    totalSeconds: conint(ge=0) = Field(
        ..., description="The total duration of the cooldown in seconds"
    )
    remainingSeconds: conint(ge=0) = Field(
        ..., description="The remaining duration of the cooldown in seconds"
    )
    expiration: Optional[datetime] = Field(
        None,
        description="The date and time when the cooldown expires in ISO 8601 format",
    )


class Symbol3(Enum):
    MODULE_MINERAL_PROCESSOR_I = "MODULE_MINERAL_PROCESSOR_I"
    MODULE_CARGO_HOLD_I = "MODULE_CARGO_HOLD_I"
    MODULE_CREW_QUARTERS_I = "MODULE_CREW_QUARTERS_I"
    MODULE_ENVOY_QUARTERS_I = "MODULE_ENVOY_QUARTERS_I"
    MODULE_PASSENGER_CABIN_I = "MODULE_PASSENGER_CABIN_I"
    MODULE_MICRO_REFINERY_I = "MODULE_MICRO_REFINERY_I"
    MODULE_ORE_REFINERY_I = "MODULE_ORE_REFINERY_I"
    MODULE_FUEL_REFINERY_I = "MODULE_FUEL_REFINERY_I"
    MODULE_SCIENCE_LAB_I = "MODULE_SCIENCE_LAB_I"
    MODULE_JUMP_DRIVE_I = "MODULE_JUMP_DRIVE_I"
    MODULE_JUMP_DRIVE_II = "MODULE_JUMP_DRIVE_II"
    MODULE_JUMP_DRIVE_III = "MODULE_JUMP_DRIVE_III"
    MODULE_WARP_DRIVE_I = "MODULE_WARP_DRIVE_I"
    MODULE_WARP_DRIVE_II = "MODULE_WARP_DRIVE_II"
    MODULE_WARP_DRIVE_III = "MODULE_WARP_DRIVE_III"
    MODULE_SHIELD_GENERATOR_I = "MODULE_SHIELD_GENERATOR_I"
    MODULE_SHIELD_GENERATOR_II = "MODULE_SHIELD_GENERATOR_II"


class ShipModule(BaseModel):
    symbol: Symbol3 = Field(..., description="The symbol of the module.")
    capacity: Optional[conint(ge=0)] = Field(
        None,
        description="Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.",
    )
    range: Optional[conint(ge=0)] = Field(
        None,
        description="Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.",
    )
    name: str = Field(..., description="Name of this module.")
    description: str = Field(..., description="Description of this module.")
    requirements: ShipRequirements


class Symbol4(Enum):
    MOUNT_GAS_SIPHON_I = "MOUNT_GAS_SIPHON_I"
    MOUNT_GAS_SIPHON_II = "MOUNT_GAS_SIPHON_II"
    MOUNT_GAS_SIPHON_III = "MOUNT_GAS_SIPHON_III"
    MOUNT_SURVEYOR_I = "MOUNT_SURVEYOR_I"
    MOUNT_SURVEYOR_II = "MOUNT_SURVEYOR_II"
    MOUNT_SURVEYOR_III = "MOUNT_SURVEYOR_III"
    MOUNT_SENSOR_ARRAY_I = "MOUNT_SENSOR_ARRAY_I"
    MOUNT_SENSOR_ARRAY_II = "MOUNT_SENSOR_ARRAY_II"
    MOUNT_SENSOR_ARRAY_III = "MOUNT_SENSOR_ARRAY_III"
    MOUNT_MINING_LASER_I = "MOUNT_MINING_LASER_I"
    MOUNT_MINING_LASER_II = "MOUNT_MINING_LASER_II"
    MOUNT_MINING_LASER_III = "MOUNT_MINING_LASER_III"
    MOUNT_LASER_CANNON_I = "MOUNT_LASER_CANNON_I"
    MOUNT_MISSILE_LAUNCHER_I = "MOUNT_MISSILE_LAUNCHER_I"
    MOUNT_TURRET_I = "MOUNT_TURRET_I"


class Deposit(Enum):
    QUARTZ_SAND = "QUARTZ_SAND"
    SILICON_CRYSTALS = "SILICON_CRYSTALS"
    PRECIOUS_STONES = "PRECIOUS_STONES"
    ICE_WATER = "ICE_WATER"
    AMMONIA_ICE = "AMMONIA_ICE"
    IRON_ORE = "IRON_ORE"
    COPPER_ORE = "COPPER_ORE"
    SILVER_ORE = "SILVER_ORE"
    ALUMINUM_ORE = "ALUMINUM_ORE"
    GOLD_ORE = "GOLD_ORE"
    PLATINUM_ORE = "PLATINUM_ORE"
    DIAMONDS = "DIAMONDS"
    URANITE_ORE = "URANITE_ORE"
    MERITIUM_ORE = "MERITIUM_ORE"


class ShipMount(BaseModel):
    symbol: Symbol4 = Field(..., description="Symbo of this mount.")
    name: str = Field(..., description="Name of this mount.")
    description: Optional[str] = Field(None, description="Description of this mount.")
    strength: Optional[conint(ge=0)] = Field(
        None,
        description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.",
    )
    deposits: Optional[List[Deposit]] = Field(
        None,
        description="Mounts that have this value denote what goods can be produced from using the mount.",
    )
    requirements: ShipRequirements


class ShipCargoItem(BaseModel):
    symbol: str = Field(
        ..., description="The unique identifier of the cargo item type."
    )
    name: str = Field(..., description="The name of the cargo item type.")
    description: str = Field(..., description="The description of the cargo item type.")
    units: conint(ge=1) = Field(
        ..., description="The number of units of the cargo item."
    )


class Consumed(BaseModel):
    amount: conint(ge=0) = Field(
        ...,
        description="The amount of fuel consumed by the most recent transit or action.",
    )
    timestamp: datetime = Field(
        ..., description="The time at which the fuel was consumed."
    )


class ShipFuel(BaseModel):
    current: conint(ge=0) = Field(
        ..., description="The current amount of fuel in the ship's tanks."
    )
    capacity: conint(ge=0) = Field(
        ..., description="The maximum amount of fuel the ship's tanks can hold."
    )
    consumed: Optional[Consumed] = Field(
        None,
        description="An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.",
    )


class ShipRegistration(BaseModel):
    name: constr(min_length=1) = Field(
        ..., description="The agent's registered name of the ship"
    )
    factionSymbol: constr(min_length=1) = Field(
        ..., description="The symbol of the faction the ship is registered with"
    )
    role: ShipRole


class ShipNavRouteWaypoint(BaseModel):
    symbol: constr(min_length=1) = Field(..., description="The symbol of the waypoint.")
    type: WaypointType
    systemSymbol: constr(min_length=1) = Field(
        ..., description="The symbol of the system the waypoint is in."
    )
    x: int = Field(..., description="Position in the universe in the x axis.")
    y: int = Field(..., description="Position in the universe in the y axis.")


class ShipFrame(BaseModel):
    symbol: Symbol = Field(..., description="Symbol of the frame.")
    name: str = Field(..., description="Name of the frame.")
    description: str = Field(..., description="Description of the frame.")
    condition: Optional[ShipCondition] = None
    moduleSlots: conint(ge=0) = Field(
        ...,
        description="The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.",
    )
    mountingPoints: conint(ge=0) = Field(
        ...,
        description="The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.",
    )
    fuelCapacity: conint(ge=0) = Field(
        ...,
        description="The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.",
    )
    requirements: ShipRequirements


class ShipCargo(BaseModel):
    capacity: conint(ge=0) = Field(
        ..., description="The max number of items that can be stored in the cargo hold."
    )
    units: conint(ge=0) = Field(
        ..., description="The number of items currently stored in the cargo hold."
    )
    inventory: List[ShipCargoItem] = Field(
        ..., description="The items currently in the cargo hold."
    )


class ShipNavRoute(BaseModel):
    destination: ShipNavRouteWaypoint
    departure: ShipNavRouteWaypoint = Field(
        ..., description="Deprecated. Use origin instead."
    )
    origin: ShipNavRouteWaypoint
    departureTime: datetime = Field(
        ..., description="The date time of the ship's departure."
    )
    arrival: datetime = Field(
        ...,
        description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.",
    )


class ShipNav(BaseModel):
    systemSymbol: str = Field(
        ..., description="The system symbol of the ship's current location."
    )
    waypointSymbol: str = Field(
        ...,
        description="The waypoint symbol of the ship's current location, or if the ship is in-transit, the waypoint symbol of the ship's destination.",
    )
    route: ShipNavRoute
    status: ShipNavStatus
    flightMode: ShipNavFlightMode


class Ship(BaseModel):
    symbol: str = Field(
        ...,
        description="The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`",
    )
    registration: ShipRegistration
    nav: ShipNav
    crew: ShipCrew
    frame: ShipFrame
    reactor: ShipReactor
    engine: ShipEngine
    cooldown: Cooldown
    modules: List[ShipModule] = Field(
        ..., description="Modules installed in this ship."
    )
    mounts: List[ShipMount] = Field(..., description="Mounts installed in this ship.")
    cargo: ShipCargo
    fuel: ShipFuel

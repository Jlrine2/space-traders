# generated by datamodel-codegen:
#   filename:  api-docs/models/Shipyard.json
#   timestamp: 2023-10-15T19:00:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ShipType(Enum):
    SHIP_PROBE = "SHIP_PROBE"
    SHIP_MINING_DRONE = "SHIP_MINING_DRONE"
    SHIP_INTERCEPTOR = "SHIP_INTERCEPTOR"
    SHIP_LIGHT_HAULER = "SHIP_LIGHT_HAULER"
    SHIP_COMMAND_FRIGATE = "SHIP_COMMAND_FRIGATE"
    SHIP_EXPLORER = "SHIP_EXPLORER"
    SHIP_HEAVY_FREIGHTER = "SHIP_HEAVY_FREIGHTER"
    SHIP_LIGHT_SHUTTLE = "SHIP_LIGHT_SHUTTLE"
    SHIP_ORE_HOUND = "SHIP_ORE_HOUND"
    SHIP_REFINING_FREIGHTER = "SHIP_REFINING_FREIGHTER"


class ShipyardTransaction(BaseModel):
    waypointSymbol: str = Field(
        ..., description="The symbol of the waypoint where the transaction took place."
    )
    shipSymbol: str = Field(
        ...,
        description="The symbol of the ship that was the subject of the transaction.",
    )
    price: conint(ge=0) = Field(..., description="The price of the transaction.")
    agentSymbol: str = Field(
        ..., description="The symbol of the agent that made the transaction."
    )
    timestamp: datetime = Field(..., description="The timestamp of the transaction.")


class Crew(BaseModel):
    required: int
    capacity: int


class Symbol(Enum):
    FRAME_PROBE = "FRAME_PROBE"
    FRAME_DRONE = "FRAME_DRONE"
    FRAME_INTERCEPTOR = "FRAME_INTERCEPTOR"
    FRAME_RACER = "FRAME_RACER"
    FRAME_FIGHTER = "FRAME_FIGHTER"
    FRAME_FRIGATE = "FRAME_FRIGATE"
    FRAME_SHUTTLE = "FRAME_SHUTTLE"
    FRAME_EXPLORER = "FRAME_EXPLORER"
    FRAME_MINER = "FRAME_MINER"
    FRAME_LIGHT_FREIGHTER = "FRAME_LIGHT_FREIGHTER"
    FRAME_HEAVY_FREIGHTER = "FRAME_HEAVY_FREIGHTER"
    FRAME_TRANSPORT = "FRAME_TRANSPORT"
    FRAME_DESTROYER = "FRAME_DESTROYER"
    FRAME_CRUISER = "FRAME_CRUISER"
    FRAME_CARRIER = "FRAME_CARRIER"


class ShipCondition(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100) = Field(
        ...,
        description="Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.",
    )


class ShipRequirements(BaseModel):
    power: Optional[int] = Field(
        None, description="The amount of power required from the reactor."
    )
    crew: Optional[int] = Field(
        None, description="The number of crew required for operation."
    )
    slots: Optional[int] = Field(
        None, description="The number of module slots required for installation."
    )


class Symbol1(Enum):
    REACTOR_SOLAR_I = "REACTOR_SOLAR_I"
    REACTOR_FUSION_I = "REACTOR_FUSION_I"
    REACTOR_FISSION_I = "REACTOR_FISSION_I"
    REACTOR_CHEMICAL_I = "REACTOR_CHEMICAL_I"
    REACTOR_ANTIMATTER_I = "REACTOR_ANTIMATTER_I"


class ShipReactor(BaseModel):
    symbol: Symbol1 = Field(..., description="Symbol of the reactor.")
    name: str = Field(..., description="Name of the reactor.")
    description: str = Field(..., description="Description of the reactor.")
    condition: Optional[ShipCondition] = None
    powerOutput: conint(ge=1) = Field(
        ...,
        description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.",
    )
    requirements: ShipRequirements


class Symbol2(Enum):
    ENGINE_IMPULSE_DRIVE_I = "ENGINE_IMPULSE_DRIVE_I"
    ENGINE_ION_DRIVE_I = "ENGINE_ION_DRIVE_I"
    ENGINE_ION_DRIVE_II = "ENGINE_ION_DRIVE_II"
    ENGINE_HYPER_DRIVE_I = "ENGINE_HYPER_DRIVE_I"


class ShipEngine(BaseModel):
    symbol: Symbol2 = Field(..., description="The symbol of the engine.")
    name: str = Field(..., description="The name of the engine.")
    description: str = Field(..., description="The description of the engine.")
    condition: Optional[ShipCondition] = None
    speed: conint(ge=1) = Field(
        ...,
        description="The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.",
    )
    requirements: ShipRequirements


class Symbol3(Enum):
    MODULE_MINERAL_PROCESSOR_I = "MODULE_MINERAL_PROCESSOR_I"
    MODULE_CARGO_HOLD_I = "MODULE_CARGO_HOLD_I"
    MODULE_CREW_QUARTERS_I = "MODULE_CREW_QUARTERS_I"
    MODULE_ENVOY_QUARTERS_I = "MODULE_ENVOY_QUARTERS_I"
    MODULE_PASSENGER_CABIN_I = "MODULE_PASSENGER_CABIN_I"
    MODULE_MICRO_REFINERY_I = "MODULE_MICRO_REFINERY_I"
    MODULE_ORE_REFINERY_I = "MODULE_ORE_REFINERY_I"
    MODULE_FUEL_REFINERY_I = "MODULE_FUEL_REFINERY_I"
    MODULE_SCIENCE_LAB_I = "MODULE_SCIENCE_LAB_I"
    MODULE_JUMP_DRIVE_I = "MODULE_JUMP_DRIVE_I"
    MODULE_JUMP_DRIVE_II = "MODULE_JUMP_DRIVE_II"
    MODULE_JUMP_DRIVE_III = "MODULE_JUMP_DRIVE_III"
    MODULE_WARP_DRIVE_I = "MODULE_WARP_DRIVE_I"
    MODULE_WARP_DRIVE_II = "MODULE_WARP_DRIVE_II"
    MODULE_WARP_DRIVE_III = "MODULE_WARP_DRIVE_III"
    MODULE_SHIELD_GENERATOR_I = "MODULE_SHIELD_GENERATOR_I"
    MODULE_SHIELD_GENERATOR_II = "MODULE_SHIELD_GENERATOR_II"


class ShipModule(BaseModel):
    symbol: Symbol3 = Field(..., description="The symbol of the module.")
    capacity: Optional[conint(ge=0)] = Field(
        None,
        description="Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.",
    )
    range: Optional[conint(ge=0)] = Field(
        None,
        description="Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.",
    )
    name: str = Field(..., description="Name of this module.")
    description: str = Field(..., description="Description of this module.")
    requirements: ShipRequirements


class Symbol4(Enum):
    MOUNT_GAS_SIPHON_I = "MOUNT_GAS_SIPHON_I"
    MOUNT_GAS_SIPHON_II = "MOUNT_GAS_SIPHON_II"
    MOUNT_GAS_SIPHON_III = "MOUNT_GAS_SIPHON_III"
    MOUNT_SURVEYOR_I = "MOUNT_SURVEYOR_I"
    MOUNT_SURVEYOR_II = "MOUNT_SURVEYOR_II"
    MOUNT_SURVEYOR_III = "MOUNT_SURVEYOR_III"
    MOUNT_SENSOR_ARRAY_I = "MOUNT_SENSOR_ARRAY_I"
    MOUNT_SENSOR_ARRAY_II = "MOUNT_SENSOR_ARRAY_II"
    MOUNT_SENSOR_ARRAY_III = "MOUNT_SENSOR_ARRAY_III"
    MOUNT_MINING_LASER_I = "MOUNT_MINING_LASER_I"
    MOUNT_MINING_LASER_II = "MOUNT_MINING_LASER_II"
    MOUNT_MINING_LASER_III = "MOUNT_MINING_LASER_III"
    MOUNT_LASER_CANNON_I = "MOUNT_LASER_CANNON_I"
    MOUNT_MISSILE_LAUNCHER_I = "MOUNT_MISSILE_LAUNCHER_I"
    MOUNT_TURRET_I = "MOUNT_TURRET_I"


class Deposit(Enum):
    QUARTZ_SAND = "QUARTZ_SAND"
    SILICON_CRYSTALS = "SILICON_CRYSTALS"
    PRECIOUS_STONES = "PRECIOUS_STONES"
    ICE_WATER = "ICE_WATER"
    AMMONIA_ICE = "AMMONIA_ICE"
    IRON_ORE = "IRON_ORE"
    COPPER_ORE = "COPPER_ORE"
    SILVER_ORE = "SILVER_ORE"
    ALUMINUM_ORE = "ALUMINUM_ORE"
    GOLD_ORE = "GOLD_ORE"
    PLATINUM_ORE = "PLATINUM_ORE"
    DIAMONDS = "DIAMONDS"
    URANITE_ORE = "URANITE_ORE"
    MERITIUM_ORE = "MERITIUM_ORE"


class ShipMount(BaseModel):
    symbol: Symbol4 = Field(..., description="Symbo of this mount.")
    name: str = Field(..., description="Name of this mount.")
    description: Optional[str] = Field(None, description="Description of this mount.")
    strength: Optional[conint(ge=0)] = Field(
        None,
        description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.",
    )
    deposits: Optional[List[Deposit]] = Field(
        None,
        description="Mounts that have this value denote what goods can be produced from using the mount.",
    )
    requirements: ShipRequirements


class ShipTypeModel(BaseModel):
    type: Optional[ShipType] = None


class ShipFrame(BaseModel):
    symbol: Symbol = Field(..., description="Symbol of the frame.")
    name: str = Field(..., description="Name of the frame.")
    description: str = Field(..., description="Description of the frame.")
    condition: Optional[ShipCondition] = None
    moduleSlots: conint(ge=0) = Field(
        ...,
        description="The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.",
    )
    mountingPoints: conint(ge=0) = Field(
        ...,
        description="The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.",
    )
    fuelCapacity: conint(ge=0) = Field(
        ...,
        description="The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.",
    )
    requirements: ShipRequirements


class ShipyardShip(BaseModel):
    type: Optional[ShipType] = None
    name: str
    description: str
    purchasePrice: int
    frame: ShipFrame
    reactor: ShipReactor
    engine: ShipEngine
    modules: List[ShipModule]
    mounts: List[ShipMount]
    crew: Crew


class Shipyard(BaseModel):
    symbol: constr(min_length=1) = Field(
        ...,
        description="The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.",
    )
    shipTypes: List[ShipTypeModel] = Field(
        ...,
        description="The list of ship types available for purchase at this shipyard.",
    )
    transactions: Optional[List[ShipyardTransaction]] = Field(
        None, description="The list of recent transactions at this shipyard."
    )
    ships: Optional[List[ShipyardShip]] = Field(
        None,
        description="The ships that are currently available for purchase at the shipyard.",
    )
    modificationsFee: int = Field(
        ...,
        description="The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.",
    )

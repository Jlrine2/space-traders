# generated by datamodel-codegen:
#   filename:  api-docs/models/ScannedShip.json
#   timestamp: 2023-10-15T19:00:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, constr


class Frame(BaseModel):
    symbol: str = Field(..., description="The symbol of the frame.")


class Reactor(BaseModel):
    symbol: str = Field(..., description="The symbol of the reactor.")


class Engine(BaseModel):
    symbol: str = Field(..., description="The symbol of the engine.")


class Mount(BaseModel):
    symbol: str = Field(..., description="The symbol of the mount.")


class ShipRole(Enum):
    FABRICATOR = "FABRICATOR"
    HARVESTER = "HARVESTER"
    HAULER = "HAULER"
    INTERCEPTOR = "INTERCEPTOR"
    EXCAVATOR = "EXCAVATOR"
    TRANSPORT = "TRANSPORT"
    REPAIR = "REPAIR"
    SURVEYOR = "SURVEYOR"
    COMMAND = "COMMAND"
    CARRIER = "CARRIER"
    PATROL = "PATROL"
    SATELLITE = "SATELLITE"
    EXPLORER = "EXPLORER"
    REFINERY = "REFINERY"


class WaypointType(Enum):
    PLANET = "PLANET"
    GAS_GIANT = "GAS_GIANT"
    MOON = "MOON"
    ORBITAL_STATION = "ORBITAL_STATION"
    JUMP_GATE = "JUMP_GATE"
    ASTEROID_FIELD = "ASTEROID_FIELD"
    NEBULA = "NEBULA"
    DEBRIS_FIELD = "DEBRIS_FIELD"
    GRAVITY_WELL = "GRAVITY_WELL"


class ShipNavStatus(Enum):
    IN_TRANSIT = "IN_TRANSIT"
    IN_ORBIT = "IN_ORBIT"
    DOCKED = "DOCKED"


class ShipNavFlightMode(Enum):
    DRIFT = "DRIFT"
    STEALTH = "STEALTH"
    CRUISE = "CRUISE"
    BURN = "BURN"


class ShipRegistration(BaseModel):
    name: constr(min_length=1) = Field(
        ..., description="The agent's registered name of the ship"
    )
    factionSymbol: constr(min_length=1) = Field(
        ..., description="The symbol of the faction the ship is registered with"
    )
    role: ShipRole


class ShipNavRouteWaypoint(BaseModel):
    symbol: constr(min_length=1) = Field(..., description="The symbol of the waypoint.")
    type: WaypointType
    systemSymbol: constr(min_length=1) = Field(
        ..., description="The symbol of the system the waypoint is in."
    )
    x: int = Field(..., description="Position in the universe in the x axis.")
    y: int = Field(..., description="Position in the universe in the y axis.")


class ShipNavRoute(BaseModel):
    destination: ShipNavRouteWaypoint
    departure: ShipNavRouteWaypoint = Field(
        ..., description="Deprecated. Use origin instead."
    )
    origin: ShipNavRouteWaypoint
    departureTime: datetime = Field(
        ..., description="The date time of the ship's departure."
    )
    arrival: datetime = Field(
        ...,
        description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.",
    )


class ShipNav(BaseModel):
    systemSymbol: str = Field(
        ..., description="The system symbol of the ship's current location."
    )
    waypointSymbol: str = Field(
        ...,
        description="The waypoint symbol of the ship's current location, or if the ship is in-transit, the waypoint symbol of the ship's destination.",
    )
    route: ShipNavRoute
    status: ShipNavStatus
    flightMode: ShipNavFlightMode


class ScannedShip(BaseModel):
    symbol: str = Field(..., description="The globally unique identifier of the ship.")
    registration: ShipRegistration
    nav: ShipNav
    frame: Optional[Frame] = Field(None, description="The frame of the ship.")
    reactor: Optional[Reactor] = Field(None, description="The reactor of the ship.")
    engine: Engine = Field(..., description="The engine of the ship.")
    mounts: Optional[List[Mount]] = Field(
        None, description="List of mounts installed in the ship."
    )

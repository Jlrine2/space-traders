# generated by datamodel-codegen:
#   filename:  api-docs/models/Market.json
#   timestamp: 2023-10-15T19:00:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, conint


class TradeSymbol(Enum):
    PRECIOUS_STONES = "PRECIOUS_STONES"
    QUARTZ_SAND = "QUARTZ_SAND"
    SILICON_CRYSTALS = "SILICON_CRYSTALS"
    AMMONIA_ICE = "AMMONIA_ICE"
    LIQUID_HYDROGEN = "LIQUID_HYDROGEN"
    LIQUID_NITROGEN = "LIQUID_NITROGEN"
    ICE_WATER = "ICE_WATER"
    EXOTIC_MATTER = "EXOTIC_MATTER"
    ADVANCED_CIRCUITRY = "ADVANCED_CIRCUITRY"
    GRAVITON_EMITTERS = "GRAVITON_EMITTERS"
    IRON = "IRON"
    IRON_ORE = "IRON_ORE"
    COPPER = "COPPER"
    COPPER_ORE = "COPPER_ORE"
    ALUMINUM = "ALUMINUM"
    ALUMINUM_ORE = "ALUMINUM_ORE"
    SILVER = "SILVER"
    SILVER_ORE = "SILVER_ORE"
    GOLD = "GOLD"
    GOLD_ORE = "GOLD_ORE"
    PLATINUM = "PLATINUM"
    PLATINUM_ORE = "PLATINUM_ORE"
    DIAMONDS = "DIAMONDS"
    URANITE = "URANITE"
    URANITE_ORE = "URANITE_ORE"
    MERITIUM = "MERITIUM"
    MERITIUM_ORE = "MERITIUM_ORE"
    HYDROCARBON = "HYDROCARBON"
    ANTIMATTER = "ANTIMATTER"
    FERTILIZERS = "FERTILIZERS"
    FABRICS = "FABRICS"
    FOOD = "FOOD"
    JEWELRY = "JEWELRY"
    MACHINERY = "MACHINERY"
    FIREARMS = "FIREARMS"
    ASSAULT_RIFLES = "ASSAULT_RIFLES"
    MILITARY_EQUIPMENT = "MILITARY_EQUIPMENT"
    EXPLOSIVES = "EXPLOSIVES"
    LAB_INSTRUMENTS = "LAB_INSTRUMENTS"
    AMMUNITION = "AMMUNITION"
    ELECTRONICS = "ELECTRONICS"
    SHIP_PLATING = "SHIP_PLATING"
    EQUIPMENT = "EQUIPMENT"
    FUEL = "FUEL"
    MEDICINE = "MEDICINE"
    DRUGS = "DRUGS"
    CLOTHING = "CLOTHING"
    MICROPROCESSORS = "MICROPROCESSORS"
    PLASTICS = "PLASTICS"
    POLYNUCLEOTIDES = "POLYNUCLEOTIDES"
    BIOCOMPOSITES = "BIOCOMPOSITES"
    NANOBOTS = "NANOBOTS"
    AI_MAINFRAMES = "AI_MAINFRAMES"
    QUANTUM_DRIVES = "QUANTUM_DRIVES"
    ROBOTIC_DRONES = "ROBOTIC_DRONES"
    CYBER_IMPLANTS = "CYBER_IMPLANTS"
    GENE_THERAPEUTICS = "GENE_THERAPEUTICS"
    NEURAL_CHIPS = "NEURAL_CHIPS"
    MOOD_REGULATORS = "MOOD_REGULATORS"
    VIRAL_AGENTS = "VIRAL_AGENTS"
    MICRO_FUSION_GENERATORS = "MICRO_FUSION_GENERATORS"
    SUPERGRAINS = "SUPERGRAINS"
    LASER_RIFLES = "LASER_RIFLES"
    HOLOGRAPHICS = "HOLOGRAPHICS"
    SHIP_SALVAGE = "SHIP_SALVAGE"
    RELIC_TECH = "RELIC_TECH"
    NOVEL_LIFEFORMS = "NOVEL_LIFEFORMS"
    BOTANICAL_SPECIMENS = "BOTANICAL_SPECIMENS"
    CULTURAL_ARTIFACTS = "CULTURAL_ARTIFACTS"
    REACTOR_SOLAR_I = "REACTOR_SOLAR_I"
    REACTOR_FUSION_I = "REACTOR_FUSION_I"
    REACTOR_FISSION_I = "REACTOR_FISSION_I"
    REACTOR_CHEMICAL_I = "REACTOR_CHEMICAL_I"
    REACTOR_ANTIMATTER_I = "REACTOR_ANTIMATTER_I"
    ENGINE_IMPULSE_DRIVE_I = "ENGINE_IMPULSE_DRIVE_I"
    ENGINE_ION_DRIVE_I = "ENGINE_ION_DRIVE_I"
    ENGINE_ION_DRIVE_II = "ENGINE_ION_DRIVE_II"
    ENGINE_HYPER_DRIVE_I = "ENGINE_HYPER_DRIVE_I"
    MODULE_MINERAL_PROCESSOR_I = "MODULE_MINERAL_PROCESSOR_I"
    MODULE_CARGO_HOLD_I = "MODULE_CARGO_HOLD_I"
    MODULE_CREW_QUARTERS_I = "MODULE_CREW_QUARTERS_I"
    MODULE_ENVOY_QUARTERS_I = "MODULE_ENVOY_QUARTERS_I"
    MODULE_PASSENGER_CABIN_I = "MODULE_PASSENGER_CABIN_I"
    MODULE_MICRO_REFINERY_I = "MODULE_MICRO_REFINERY_I"
    MODULE_ORE_REFINERY_I = "MODULE_ORE_REFINERY_I"
    MODULE_FUEL_REFINERY_I = "MODULE_FUEL_REFINERY_I"
    MODULE_SCIENCE_LAB_I = "MODULE_SCIENCE_LAB_I"
    MODULE_JUMP_DRIVE_I = "MODULE_JUMP_DRIVE_I"
    MODULE_JUMP_DRIVE_II = "MODULE_JUMP_DRIVE_II"
    MODULE_JUMP_DRIVE_III = "MODULE_JUMP_DRIVE_III"
    MODULE_WARP_DRIVE_I = "MODULE_WARP_DRIVE_I"
    MODULE_WARP_DRIVE_II = "MODULE_WARP_DRIVE_II"
    MODULE_WARP_DRIVE_III = "MODULE_WARP_DRIVE_III"
    MODULE_SHIELD_GENERATOR_I = "MODULE_SHIELD_GENERATOR_I"
    MODULE_SHIELD_GENERATOR_II = "MODULE_SHIELD_GENERATOR_II"
    MOUNT_GAS_SIPHON_I = "MOUNT_GAS_SIPHON_I"
    MOUNT_GAS_SIPHON_II = "MOUNT_GAS_SIPHON_II"
    MOUNT_GAS_SIPHON_III = "MOUNT_GAS_SIPHON_III"
    MOUNT_SURVEYOR_I = "MOUNT_SURVEYOR_I"
    MOUNT_SURVEYOR_II = "MOUNT_SURVEYOR_II"
    MOUNT_SURVEYOR_III = "MOUNT_SURVEYOR_III"
    MOUNT_SENSOR_ARRAY_I = "MOUNT_SENSOR_ARRAY_I"
    MOUNT_SENSOR_ARRAY_II = "MOUNT_SENSOR_ARRAY_II"
    MOUNT_SENSOR_ARRAY_III = "MOUNT_SENSOR_ARRAY_III"
    MOUNT_MINING_LASER_I = "MOUNT_MINING_LASER_I"
    MOUNT_MINING_LASER_II = "MOUNT_MINING_LASER_II"
    MOUNT_MINING_LASER_III = "MOUNT_MINING_LASER_III"
    MOUNT_LASER_CANNON_I = "MOUNT_LASER_CANNON_I"
    MOUNT_MISSILE_LAUNCHER_I = "MOUNT_MISSILE_LAUNCHER_I"
    MOUNT_TURRET_I = "MOUNT_TURRET_I"


class Type(Enum):
    PURCHASE = "PURCHASE"
    SELL = "SELL"


class MarketTransaction(BaseModel):
    waypointSymbol: str = Field(
        ..., description="The symbol of the waypoint where the transaction took place."
    )
    shipSymbol: str = Field(
        ..., description="The symbol of the ship that made the transaction."
    )
    tradeSymbol: str = Field(..., description="The symbol of the trade good.")
    type: Type = Field(..., description="The type of transaction.")
    units: conint(ge=0) = Field(
        ..., description="The number of units of the transaction."
    )
    pricePerUnit: conint(ge=0) = Field(
        ..., description="The price per unit of the transaction."
    )
    totalPrice: conint(ge=0) = Field(
        ..., description="The total price of the transaction."
    )
    timestamp: datetime = Field(..., description="The timestamp of the transaction.")


class Supply(Enum):
    SCARCE = "SCARCE"
    LIMITED = "LIMITED"
    MODERATE = "MODERATE"
    ABUNDANT = "ABUNDANT"


class MarketTradeGood(BaseModel):
    symbol: str = Field(..., description="The symbol of the trade good.")
    tradeVolume: conint(ge=1) = Field(
        ...,
        description="The typical volume flowing through the market for this type of good. The larger the trade volume, the more stable prices will be.",
    )
    supply: Supply = Field(
        ...,
        description="A rough estimate of the total supply of this good in the marketplace.",
    )
    purchasePrice: conint(ge=0) = Field(
        ...,
        description="The price at which this good can be purchased from the market.",
    )
    sellPrice: conint(ge=0) = Field(
        ..., description="The price at which this good can be sold to the market."
    )


class TradeGood(BaseModel):
    symbol: TradeSymbol
    name: str = Field(..., description="The name of the good.")
    description: str = Field(..., description="The description of the good.")


class Market(BaseModel):
    symbol: str = Field(
        ...,
        description="The symbol of the market. The symbol is the same as the waypoint where the market is located.",
    )
    exports: List[TradeGood] = Field(
        ..., description="The list of goods that are exported from this market."
    )
    imports: List[TradeGood] = Field(
        ..., description="The list of goods that are sought as imports in this market."
    )
    exchange: List[TradeGood] = Field(
        ...,
        description="The list of goods that are bought and sold between agents at this market.",
    )
    transactions: Optional[List[MarketTransaction]] = Field(
        None,
        description="The list of recent transactions at this market. Visible only when a ship is present at the market.",
    )
    tradeGoods: Optional[List[MarketTradeGood]] = Field(
        None,
        description="The list of goods that are traded at this market. Visible only when a ship is present at the market.",
    )

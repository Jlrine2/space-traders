# generated by datamodel-codegen:
#   filename:  api-docs/models/JumpGate.json
#   timestamp: 2023-10-21T17:38:30+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, constr
from typing_extensions import Literal


class SystemType(
    RootModel[
        Literal[
            'NEUTRON_STAR',
            'RED_STAR',
            'ORANGE_STAR',
            'BLUE_STAR',
            'YOUNG_STAR',
            'WHITE_DWARF',
            'BLACK_HOLE',
            'HYPERGIANT',
            'NEBULA',
            'UNSTABLE',
        ]
    ]
):
    root: Literal[
        'NEUTRON_STAR',
        'RED_STAR',
        'ORANGE_STAR',
        'BLUE_STAR',
        'YOUNG_STAR',
        'WHITE_DWARF',
        'BLACK_HOLE',
        'HYPERGIANT',
        'NEBULA',
        'UNSTABLE',
    ] = Field(..., description='The type of waypoint.')


class ConnectedSystem(BaseModel):
    symbol: constr(min_length=1) = Field(..., description='The symbol of the system.')
    sectorSymbol: constr(min_length=1) = Field(
        ..., description='The sector of this system.'
    )
    type: SystemType
    factionSymbol: Optional[str] = Field(
        None,
        description='The symbol of the faction that owns the connected jump gate in the system.',
    )
    x: int = Field(..., description='Position in the universe in the x axis.')
    y: int = Field(..., description='Position in the universe in the y axis.')
    distance: int = Field(
        ..., description='The distance of this system to the connected Jump Gate.'
    )


class JumpGate(BaseModel):
    jumpRange: float = Field(..., description='The maximum jump range of the gate.')
    factionSymbol: Optional[str] = Field(
        None, description='The symbol of the faction that owns the gate.'
    )
    connectedSystems: List[ConnectedSystem] = Field(
        ...,
        description='The systems within range of the gate that have a corresponding gate.',
    )

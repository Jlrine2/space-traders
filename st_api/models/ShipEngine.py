# generated by datamodel-codegen:
#   filename:  api-docs/models/ShipEngine.json
#   timestamp: 2023-10-15T19:00:16+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, RootModel, conint


class Symbol(Enum):
    ENGINE_IMPULSE_DRIVE_I = "ENGINE_IMPULSE_DRIVE_I"
    ENGINE_ION_DRIVE_I = "ENGINE_ION_DRIVE_I"
    ENGINE_ION_DRIVE_II = "ENGINE_ION_DRIVE_II"
    ENGINE_HYPER_DRIVE_I = "ENGINE_HYPER_DRIVE_I"


class ShipCondition(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100) = Field(
        ...,
        description="Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.",
    )


class ShipRequirements(BaseModel):
    power: Optional[int] = Field(
        None, description="The amount of power required from the reactor."
    )
    crew: Optional[int] = Field(
        None, description="The number of crew required for operation."
    )
    slots: Optional[int] = Field(
        None, description="The number of module slots required for installation."
    )


class ShipEngine(BaseModel):
    symbol: Symbol = Field(..., description="The symbol of the engine.")
    name: str = Field(..., description="The name of the engine.")
    description: str = Field(..., description="The description of the engine.")
    condition: Optional[ShipCondition] = None
    speed: conint(ge=1) = Field(
        ...,
        description="The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.",
    )
    requirements: ShipRequirements

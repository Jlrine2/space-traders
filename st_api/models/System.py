# generated by datamodel-codegen:
#   filename:  api-docs/models/System.json
#   timestamp: 2023-10-15T19:00:16+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, constr


class SystemType(Enum):
    NEUTRON_STAR = "NEUTRON_STAR"
    RED_STAR = "RED_STAR"
    ORANGE_STAR = "ORANGE_STAR"
    BLUE_STAR = "BLUE_STAR"
    YOUNG_STAR = "YOUNG_STAR"
    WHITE_DWARF = "WHITE_DWARF"
    BLACK_HOLE = "BLACK_HOLE"
    HYPERGIANT = "HYPERGIANT"
    NEBULA = "NEBULA"
    UNSTABLE = "UNSTABLE"


class WaypointType(Enum):
    PLANET = "PLANET"
    GAS_GIANT = "GAS_GIANT"
    MOON = "MOON"
    ORBITAL_STATION = "ORBITAL_STATION"
    JUMP_GATE = "JUMP_GATE"
    ASTEROID_FIELD = "ASTEROID_FIELD"
    NEBULA = "NEBULA"
    DEBRIS_FIELD = "DEBRIS_FIELD"
    GRAVITY_WELL = "GRAVITY_WELL"


class WaypointOrbital(BaseModel):
    symbol: constr(min_length=1) = Field(
        ..., description="The symbol of the orbiting waypoint."
    )


class FactionSymbols(Enum):
    COSMIC = "COSMIC"
    VOID = "VOID"
    GALACTIC = "GALACTIC"
    QUANTUM = "QUANTUM"
    DOMINION = "DOMINION"
    ASTRO = "ASTRO"
    CORSAIRS = "CORSAIRS"
    OBSIDIAN = "OBSIDIAN"
    AEGIS = "AEGIS"
    UNITED = "UNITED"
    SOLITARY = "SOLITARY"
    COBALT = "COBALT"
    OMEGA = "OMEGA"
    ECHO = "ECHO"
    LORDS = "LORDS"
    CULT = "CULT"
    ANCIENTS = "ANCIENTS"
    SHADOW = "SHADOW"
    ETHEREAL = "ETHEREAL"


class SystemWaypoint(BaseModel):
    symbol: str = Field(..., description="The symbol of the waypoint.")
    type: WaypointType
    x: int = Field(
        ...,
        description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.",
    )
    y: int = Field(
        ...,
        description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.",
    )
    orbitals: List[WaypointOrbital] = Field(
        ..., description="Waypoints that orbit this waypoint."
    )
    orbits: Optional[constr(min_length=1)] = Field(
        None,
        description="The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.",
    )


class SystemFaction(BaseModel):
    symbol: FactionSymbols


class System(BaseModel):
    symbol: constr(min_length=1) = Field(..., description="The symbol of the system.")
    sectorSymbol: constr(min_length=1) = Field(
        ..., description="The symbol of the sector."
    )
    type: SystemType
    x: int = Field(
        ..., description="Relative position of the system in the sector in the x axis."
    )
    y: int = Field(
        ..., description="Relative position of the system in the sector in the y axis."
    )
    waypoints: List[SystemWaypoint] = Field(
        ..., description="Waypoints in this system."
    )
    factions: List[SystemFaction] = Field(
        ..., description="Factions that control this system."
    )

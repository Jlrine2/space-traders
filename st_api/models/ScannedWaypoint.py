# generated by datamodel-codegen:
#   filename:  api-docs/models/ScannedWaypoint.json
#   timestamp: 2023-10-21T17:38:30+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, constr
from typing_extensions import Literal


class WaypointType(
    RootModel[
        Literal[
            'PLANET',
            'GAS_GIANT',
            'MOON',
            'ORBITAL_STATION',
            'JUMP_GATE',
            'ASTEROID_FIELD',
            'NEBULA',
            'DEBRIS_FIELD',
            'GRAVITY_WELL',
        ]
    ]
):
    root: Literal[
        'PLANET',
        'GAS_GIANT',
        'MOON',
        'ORBITAL_STATION',
        'JUMP_GATE',
        'ASTEROID_FIELD',
        'NEBULA',
        'DEBRIS_FIELD',
        'GRAVITY_WELL',
    ] = Field(..., description='The type of waypoint.')


class WaypointOrbital(BaseModel):
    symbol: constr(min_length=1) = Field(
        ..., description='The symbol of the orbiting waypoint.'
    )


class FactionSymbols(
    RootModel[
        Literal[
            'COSMIC',
            'VOID',
            'GALACTIC',
            'QUANTUM',
            'DOMINION',
            'ASTRO',
            'CORSAIRS',
            'OBSIDIAN',
            'AEGIS',
            'UNITED',
            'SOLITARY',
            'COBALT',
            'OMEGA',
            'ECHO',
            'LORDS',
            'CULT',
            'ANCIENTS',
            'SHADOW',
            'ETHEREAL',
        ]
    ]
):
    root: Literal[
        'COSMIC',
        'VOID',
        'GALACTIC',
        'QUANTUM',
        'DOMINION',
        'ASTRO',
        'CORSAIRS',
        'OBSIDIAN',
        'AEGIS',
        'UNITED',
        'SOLITARY',
        'COBALT',
        'OMEGA',
        'ECHO',
        'LORDS',
        'CULT',
        'ANCIENTS',
        'SHADOW',
        'ETHEREAL',
    ] = Field(..., description='The symbol of the faction.', examples=['COSMIC'])


class WaypointTrait(BaseModel):
    symbol: Literal[
        'UNCHARTED',
        'MARKETPLACE',
        'SHIPYARD',
        'OUTPOST',
        'SCATTERED_SETTLEMENTS',
        'SPRAWLING_CITIES',
        'MEGA_STRUCTURES',
        'OVERCROWDED',
        'HIGH_TECH',
        'CORRUPT',
        'BUREAUCRATIC',
        'TRADING_HUB',
        'INDUSTRIAL',
        'BLACK_MARKET',
        'RESEARCH_FACILITY',
        'MILITARY_BASE',
        'SURVEILLANCE_OUTPOST',
        'EXPLORATION_OUTPOST',
        'MINERAL_DEPOSITS',
        'COMMON_METAL_DEPOSITS',
        'PRECIOUS_METAL_DEPOSITS',
        'RARE_METAL_DEPOSITS',
        'METHANE_POOLS',
        'ICE_CRYSTALS',
        'EXPLOSIVE_GASES',
        'STRONG_MAGNETOSPHERE',
        'VIBRANT_AURORAS',
        'SALT_FLATS',
        'CANYONS',
        'PERPETUAL_DAYLIGHT',
        'PERPETUAL_OVERCAST',
        'DRY_SEABEDS',
        'MAGMA_SEAS',
        'SUPERVOLCANOES',
        'ASH_CLOUDS',
        'VAST_RUINS',
        'MUTATED_FLORA',
        'TERRAFORMED',
        'EXTREME_TEMPERATURES',
        'EXTREME_PRESSURE',
        'DIVERSE_LIFE',
        'SCARCE_LIFE',
        'FOSSILS',
        'WEAK_GRAVITY',
        'STRONG_GRAVITY',
        'CRUSHING_GRAVITY',
        'TOXIC_ATMOSPHERE',
        'CORROSIVE_ATMOSPHERE',
        'BREATHABLE_ATMOSPHERE',
        'JOVIAN',
        'ROCKY',
        'VOLCANIC',
        'FROZEN',
        'SWAMP',
        'BARREN',
        'TEMPERATE',
        'JUNGLE',
        'OCEAN',
        'STRIPPED',
    ] = Field(..., description='The unique identifier of the trait.')
    name: str = Field(..., description='The name of the trait.')
    description: str = Field(..., description='A description of the trait.')


class Chart(BaseModel):
    waypointSymbol: Optional[str] = Field(
        None, description='The symbol of the waypoint.'
    )
    submittedBy: Optional[str] = Field(
        None, description='The agent that submitted the chart for this waypoint.'
    )
    submittedOn: Optional[datetime] = Field(
        None, description='The time the chart for this waypoint was submitted.'
    )


class WaypointFaction(BaseModel):
    symbol: FactionSymbols


class ScannedWaypoint(BaseModel):
    symbol: constr(min_length=1) = Field(..., description='Symbol of the waypoint.')
    type: WaypointType
    systemSymbol: constr(min_length=1) = Field(..., description='Symbol of the system.')
    x: int = Field(..., description='Position in the universe in the x axis.')
    y: int = Field(..., description='Position in the universe in the y axis.')
    orbitals: List[WaypointOrbital] = Field(
        ..., description='List of waypoints that orbit this waypoint.'
    )
    faction: Optional[WaypointFaction] = None
    traits: List[WaypointTrait] = Field(..., description='The traits of the waypoint.')
    chart: Optional[Chart] = None

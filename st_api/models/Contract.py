# generated by datamodel-codegen:
#   filename:  api-docs/models/Contract.json
#   timestamp: 2023-10-21T17:38:30+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field, constr
from typing_extensions import Literal


class ContractPayment(BaseModel):
    onAccepted: int = Field(
        ...,
        description='The amount of credits received up front for accepting the contract.',
    )
    onFulfilled: int = Field(
        ...,
        description='The amount of credits received when the contract is fulfilled.',
    )


class ContractDeliverGood(BaseModel):
    tradeSymbol: constr(min_length=1) = Field(
        ..., description='The symbol of the trade good to deliver.'
    )
    destinationSymbol: constr(min_length=1) = Field(
        ..., description='The destination where goods need to be delivered.'
    )
    unitsRequired: int = Field(
        ...,
        description='The number of units that need to be delivered on this contract.',
    )
    unitsFulfilled: int = Field(
        ..., description='The number of units fulfilled on this contract.'
    )


class ContractTerms(BaseModel):
    deadline: datetime = Field(..., description='The deadline for the contract.')
    payment: ContractPayment = Field(..., description='Payments for the contract.')
    deliver: Optional[List[ContractDeliverGood]] = Field(
        None,
        description='The cargo that needs to be delivered to fulfill the contract.',
    )


class Contract(BaseModel):
    id: constr(min_length=1) = Field(..., description='ID of the contract.')
    factionSymbol: constr(min_length=1) = Field(
        ..., description='The symbol of the faction that this contract is for.'
    )
    type: Literal['PROCUREMENT', 'TRANSPORT', 'SHUTTLE'] = Field(
        ..., description='Type of contract.'
    )
    terms: ContractTerms = Field(..., description='The terms to fulfill the contract.')
    accepted: bool = Field(
        ..., description='Whether the contract has been accepted by the agent'
    )
    fulfilled: bool = Field(..., description='Whether the contract has been fulfilled')
    expiration: datetime = Field(
        ..., description='Deprecated in favor of deadlineToAccept'
    )
    deadlineToAccept: Optional[datetime] = Field(
        None,
        description='The time at which the contract is no longer available to be accepted',
    )
